using MediatR;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;


namespace {{ namespace }};

public class Dependencies
{
    public static void Configure(IServiceCollection services)
    {
        services.AddLogging();

        services.AddMediatR(typeof({{ applicationNamespace }}.Default));

        var configuration = new ConfigurationBuilder()
            .AddUserSecrets<Program>(optional:true)
            .Build();

        services.AddSingleton<IConfiguration>(_ => configuration);

        services.AddSingleton<ICommandService, CommandService>();
        services.AddSingleton<IFileSystem, FileSystem>();
        services.AddSingleton<ITemplateLocator, TemplateLocator>();
        services.AddSingleton<ITemplateProcessor, LiquidTemplateProcessor>();
        services.AddSingleton<INamingConventionConverter, NamingConventionConverter>();
        services.AddSingleton<ITenseConverter, TenseConverter>();
        services.AddSingleton<INamespaceProvider, NamespaceProvider>();
        services.AddSingleton<IFileProvider, FileProvider>();
        services.AddSingleton<IFileFactory,FileFactory>();
        services.AddSingleton<IFileGenerationStrategy, TemplateFileGenerationStrategy>();        
    }
}
